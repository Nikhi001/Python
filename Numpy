## Introduction to NumPy


* NumPy is a fundamental package for scientific computing in Python.
* It provides a multi-dimensional array object called 'ndarray' and various derived objects such as matrices and tensors.
* NumPy offers a set of routines for fast operations on arrays, including:
Mathematical operations
Logical operations
Sorting, selecting
Input/output
Fourier transforms
Basic linear algebra
Basic statistics operations
Random simulation
Why NumPy?


NumPy was created to address the slow speed of Python's data structures (lists and dictionaries) when processing large datasets.
NumPy's arrays are stored in C, but wrapped in a Python interface, allowing for fast computation and easy syntax.
Differences Between NumPy Arrays and Python Sequences


 NumPy arrays have a fixed size and cannot be dynamically resized like Python lists.
 Elements in a NumPy array must be of the same data type.

0NumPy arrays use a contiguous memory layout, making them more efficient for mathematical operations.
Creating NumPy Arrays

Using np.array()


* Import the NumPy library as `np`.
* Create a NumPy array using `np.array(list)`, where `list` is a list of values.
Using np.arange()


* Create a NumPy array with a range of values using `np.arange(start, stop, step)`.
* The `start` and `stop` parameters define the range, and `step` defines the interval between values.
Using np.ones() and np.zeros()


* Create an array filled with all ones or zeros using `np.ones(shape)` or `np.zeros(shape)`, where `shape` is a tuple representing the dimensions of the array.
Specifying the Data Type


* To specify the data type of a NumPy array, use the `dtype` parameter in the array creation function (e.g., `np.array(list, dtype=np.float64)`).
Reshaping Arrays


* Reshape a NumPy array using the `np.reshape(array, shape)` function, where `shape` is a tuple representing the desired dimensions.
Understanding Numpy Array Attributes

1.ndim (Number of Dimensions)

The `ndim` attribute provides the number of dimensions in a NumPy array. For example, a 1D array (vector) has `ndim` equal to 1, a 2D array (matrix) has `ndim` equal to 2, and a 3D array (tensor) has `ndim` equal to 3.
2.shape (Array Shape)

The `shape` attribute provides the number of elements in each dimension of an array. For a 2D array, `shape` would be a tuple containing the number of rows and columns. For a 3D array, `shape` would be a tuple containing the number of planes, rows, and columns.
3.size (Total Number of Elements)

The `size` attribute provides the total number of elements in an array. This is calculated by multiplying the number of elements in each dimension together.
4.itemsize (Size of Each Element in Bytes)

The `itemsize` attribute provides the size of each element in the array in bytes. This is determined by the data type of the array's elements.
5.dtype (Data Type)

The `dtype` attribute provides the data type of the elements in an array. Common data types include `int`, `float`, and `str`.
6.Mathematical Operations


NumPy arrays support a wide range of mathematical operations, including:

- **Scalar Operations:** Operations performed between an array and a single number.
- **Vector Operations:** Operations performed between two arrays of the same shape.
- **Broadcasting:** Operations that automatically adjust the shapes of arrays to enable element-wise operations.
7.Comparison Operations


NumPy arrays support comparison operations, allowing you to check if elements meet certain conditions.
8.Indexing and Slicing


Indexing and slicing allow you to access and manipulate specific elements or subsets of an array.
9.Transposing


Transposing swaps the rows and columns of a 2D array.

These are just a few of the important attributes and operations available in NumPy. Understanding these concepts will help you effectively work with and analyze data using NumPy.
**NumPy 101: Exploring NumPy Arrays**


NumPy, also known as Numerical Python, is a widely used Python library for scientific computing. It allows users to easily work with multidimensional arrays and perform mathematical operations on them.
**Creating NumPy Arrays**


To create a NumPy array, we can use the `np.array()` function. For example, to create an array from a list of numbers, we can write:

```python
import numpy as np

array = np.array([1, 2, 3, 4, 5])
print(array)
```

This will create a one-dimensional NumPy array.
**Attributes of NumPy Arrays**


NumPy arrays have several useful attributes, including:

* `dtype`: The data type of the array's elements.
* `shape`: The number of rows and columns in the array.
* `size`: The total number of elements in the array.

We can access these attributes using the `dtype`, `shape`, and `size` properties.
**Scalar and Vector Operations**


NumPy arrays support both scalar and vector operations. Scalar operations are performed element-wise, while vector operations are performed on the entire array.

Some common scalar operations include:

* `+`: Addition
* `-`: Subtraction
* `*`: Multiplication
* `/`: Division

Some common vector operations include:

* `sum()`: Sum of all elements
* `min()`: Minimum value
* `max()`: Maximum value
* `mean()`: Mean (average) value
* `std()`: Standard deviation
**Indexing and Slicing**


Indexing and slicing allow us to access and manipulate individual elements or subsets of elements in an array.

* **Indexing:** To access an element at a specific index, we use square brackets `[]`.
* **Slicing:** To access a range of elements, we use the slice operator `[:]`.

For example:

```python
array = np.array([[1, 2, 3], [4, 5, 6]])
print(array[0, 1]) 
Access the element at index (0, 1)

print(array[0:2, 1:3]) 
Slice the array from (0, 1) to (2, 3)

```
**Looping Over Arrays**


We can use loops to iterate over the elements of an array.

```python
for element in array:
print(element)
```
**Reshaping Arrays**


We can reshape an array using the `reshape()` method. This allows us to change the number of rows and columns in the array.

```python
array = np.array([1, 2, 3, 4, 5, 6])
new_array = array.reshape((2, 3))
print(new_array)
```
**Stacking Arrays**


We can stack arrays together either horizontally (row-wise) or vertically (column-wise) using the `hstack()` and `vstack()` functions respectively.
**Splitting Arrays**


We can split arrays into smaller arrays either horizontally or vertically using the `hsplit()` and `vsplit()` functions respectively.
**Key Takeaways**


* NumPy arrays provide a powerful way to work with multidimensional data in Python.
* They support a wide range of scalar and vector operations.
* Indexing and slicing allow us to access and manipulate individual elements or subsets of elements.
* Reshaping, stacking, and splitting arrays allow us to transform and reorganize data as needed.

